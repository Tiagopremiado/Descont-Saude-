import React, { useState, useEffect, useCallback } from 'react';
import type { Payment } from '../../types';
import { getPaymentsByClientId, generateNewInvoice } from '../../services/apiService';
import Card from '../common/Card';
import Spinner from '../common/Spinner';
import PixPaymentModal from './PixPaymentModal';

interface PaymentHistoryProps {
  clientId: string;
}

const PaymentHistory: React.FC<PaymentHistoryProps> = ({ clientId }) => {
    const [payments, setPayments] = useState<Payment[]>([]);
    const [loading, setLoading] = useState(true);
    const [generating, setGenerating] = useState(false);
    // State for Pix Modal
    const [isPixModalOpen, setIsPixModalOpen] = useState(false);
    const [selectedPayment, setSelectedPayment] = useState<Payment | null>(null);
    const [pixCode, setPixCode] = useState<string | null>(null);

    const fetchPayments = useCallback(async () => {
        setLoading(true);
        const data = await getPaymentsByClientId(clientId);
        setPayments(data.sort((a,b) => new Date(b.dueDate).getTime() - new Date(a.dueDate).getTime()));
        setLoading(false);
    }, [clientId]);
    
    useEffect(() => {
        fetchPayments();
    }, [fetchPayments]);

    const handleGenerateInvoice = async () => {
        setGenerating(true);
        // Generates invoice for next month for demo purposes
        const nextMonthDate = new Date();
        nextMonthDate.setMonth(nextMonthDate.getMonth() + 1);
        const month = nextMonthDate.toLocaleString('pt-BR', { month: 'long' });
        const year = nextMonthDate.getFullYear();
        await generateNewInvoice(clientId, month.charAt(0).toUpperCase() + month.slice(1), year);
        await fetchPayments(); // Refresh list
        setGenerating(false);
    }

    const handlePayWithPix = (payment: Payment) => {
        setSelectedPayment(payment);
        // In a real app, this would be generated by a backend service.
        // This is a static example PIX code.
        setPixCode('00020126360014br.gov.bcb.pix0114+55539915608615204000053039865405' + payment.amount.toFixed(2).replace('.', '') + '5802BR5911TIAGO SILVA6012PEDRO OSORIO62070503***6304E24C');
        setIsPixModalOpen(true);
    };

    const getStatusChip = (status: Payment['status']) => {
        const styles = {
            paid: 'bg-green-100 text-green-800',
            pending: 'bg-yellow-100 text-yellow-800',
            overdue: 'bg-red-100 text-red-800'
        };
        const text = {
            paid: 'Pago',
            pending: 'Pendente',
            overdue: 'Vencido'
        }
        return <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${styles[status]}`}>{text[status]}</span>
    }

    return (
        <>
            <Card title="Meu Histórico de Pagamentos">
                <div className="flex justify-end mb-4">
                    <button 
                        onClick={handleGenerateInvoice}
                        disabled={generating}
                        className="bg-ds-dourado text-ds-vinho font-bold py-2 px-4 rounded-full hover:bg-opacity-90 transition-colors disabled:opacity-50"
                    >
                        {generating ? 'Gerando...' : 'Solicitar 2ª Via / Boleto'}
                    </button>
                </div>
                {loading ? <Spinner /> : (
                    <ul className="divide-y divide-gray-200">
                        {payments.map(payment => (
                            <li key={payment.id} className="py-4 flex flex-col sm:flex-row sm:items-center sm:justify-between">
                                <div className="flex-grow">
                                    <p className="text-sm font-medium text-ds-vinho">{payment.month} de {payment.year}</p>
                                    <p className="text-sm text-gray-500">Vencimento: {new Date(payment.dueDate).toLocaleDateString('pt-BR')}</p>
                                    <p className="text-lg font-bold">R$ {payment.amount.toFixed(2)}</p>
                                </div>
                                <div className="flex items-center gap-4 mt-2 sm:mt-0">
                                    {getStatusChip(payment.status)}
                                    {(payment.status === 'pending' || payment.status === 'overdue') && (
                                        <button 
                                            onClick={() => handlePayWithPix(payment)}
                                            className="bg-cyan-500 text-white text-xs font-bold py-1 px-3 rounded-full hover:bg-cyan-600 transition-colors"
                                        >
                                            Pagar com PIX
                                        </button>
                                    )}
                                </div>
                            </li>
                        ))}
                    </ul>
                )}
            </Card>
            <PixPaymentModal
                isOpen={isPixModalOpen}
                onClose={() => setIsPixModalOpen(false)}
                payment={selectedPayment}
                pixCode={pixCode}
            />
        </>
    );
};

export default PaymentHistory;
